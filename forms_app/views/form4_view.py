# forms_app/views/form4_view.py

import re
import pandas as pd
from datetime import datetime
from io import BytesIO
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required
from django.http import HttpResponse
from django.contrib import messages
from forms_app.forms import UploadFileForm, Form4DataForm
from forms_app.models import Form4Data  # –£–±–µ–¥–∏—Å—å, —á—Ç–æ –º–æ–¥–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞
from django.db.models import Q
from openpyxl.styles import Alignment, Font, NamedStyle
from openpyxl.utils import get_column_letter


@login_required
def upload_file(request):
    if request.method == "POST":
        form = UploadFileForm(request.POST, request.FILES)
        if form.is_valid():
            uploaded_file = request.FILES["file"]

            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏
            try:
                file_data = BytesIO(uploaded_file.read())
                df_input = pd.read_excel(file_data, sheet_name=0).head(150)
            except Exception as e:
                messages.error(request, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ Excel: {e}")
                return render(request, "forms_app/form4_upload.html", {"form": form})

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
            required_columns = ["–ö–æ–¥ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã"]
            missing_columns = [
                col for col in required_columns if col not in df_input.columns
            ]
            if missing_columns:
                messages.error(
                    request,
                    f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {', '.join(missing_columns)}",
                )
                return render(request, "forms_app/form4_upload.html", {"form": form})

            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞—Ç—ã –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            def extract_date_from_filename(filename):
                match = re.search(r"(\d{2}\.\d{2}\.\d{4})\.xlsx", filename)
                if match:
                    return datetime.strptime(match.group(1), "%d.%m.%Y").date()
                return datetime.now().date()

            file_date = extract_date_from_filename(uploaded_file.name)

            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
            new_records = []
            for _, row in df_input.iterrows():
                code = str(row["–ö–æ–¥ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã"]).strip()
                # üîΩ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –∫–æ–¥ –ø—É—Å—Ç–æ–π –∏–ª–∏ —Ä–∞–≤–µ–Ω 0
                if not code or code == "0" or code == "000" or code == "000000000":
                    continue  # ‚Üê –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç—É —Å—Ç—Ä–æ–∫—É

                article = str(row.get("–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞", "")).strip() or None

                def safe_float(val):
                    try:
                        return float(val) if pd.notna(val) else None
                    except:
                        return None

                def safe_int(val):
                    try:
                        return int(val) if pd.notna(val) else None
                    except:
                        return None

                new_records.append(
                    Form4Data(
                        user=request.user,
                        code=code,
                        article=article,
                        date=file_date,
                        clear_sales_our=safe_float(row.get("–ß–∏—Å—Ç—ã–µ –ø—Ä–æ–¥–∞–∂–∏ –ù–∞—à–∏")),
                        clear_sales_vb=safe_float(row.get("–ß–∏—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –í–ë")),
                        clear_transfer=safe_float(row.get("–ß–∏—Å—Ç–æ–µ –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ")),
                        clear_transfer_without_log=safe_float(
                            row.get("–ß–∏—Å—Ç–æ–µ –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ –±–µ–∑ –õ–æ–≥–∏—Å—Ç–∏–∫–∏")
                        ),
                        our_price_mid=safe_float(row.get("–ù–∞—à–∞ —Ü–µ–Ω–∞ –°—Ä–µ–¥–Ω—è—è")),
                        vb_selling_mid=safe_float(row.get("–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –í–ë –°—Ä–µ–¥–Ω—è—è")),
                        transfer_mid=safe_float(row.get("–ö –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—é –°—Ä–µ–¥–Ω–µ–µ")),
                        transfer_without_log_mid=safe_float(
                            row.get("–ö –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—é –±–µ–∑ –õ–æ–≥–∏—Å—Ç–∏–∫–∏ –°—Ä–µ–¥–Ω—è—è")
                        ),
                        qentity_sale=safe_int(row.get("–ß–∏—Å—Ç—ã–µ –ø—Ä–æ–¥–∞–∂–∏, —à—Ç")),
                        sebes_sale=safe_float(row.get("–°–µ–±–µ—Å –ü—Ä–æ–¥–∞–∂ (600—Ä)")),
                        profit_1=safe_float(row.get("–ü—Ä–∏–±—ã–ª—å –Ω–∞ 1 –Æ–±–∫—É")),
                        percent_sell=safe_float(row.get("%–í—ã–∫—É–ø–∞")),
                        profit=safe_float(row.get("–ü—Ä–∏–±—ã–ª—å")),
                        orders=safe_int(row.get("–ó–∞–∫–∞–∑—ã")),
                    )
                )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥—É–±–ª–∏ –ø–æ unique_together)
            Form4Data.objects.bulk_create(new_records, ignore_conflicts=True)

            messages.success(request, "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
            return redirect("forms_app:form4_list")

    else:
        form = UploadFileForm()

    return render(request, "forms_app/form4_upload.html", {"form": form})


# === –°–ü–ò–°–û–ö –í–°–ï–• –ö–û–î–û–í (–∫–∞–∫ "–ª–∏—Å—Ç—ã") ===
@login_required
def form4_list(request):
    # print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", request.user)
    # ‚úÖ –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã, —Å–æ—Ä—Ç–∏—Ä—É–µ–º: —Å–Ω–∞—á–∞–ª–∞ –ø–æ –∫–æ–¥—É, –ø–æ—Ç–æ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—Ä—Ö—É
    queryset = Form4Data.objects.filter(user=request.user).order_by("code", "-date")
    # print("üîç –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π:", queryset.count())

    # if queryset.count() == 0:
    # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ –¥–∞–Ω–Ω—ã–µ —É –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    # print("üëÄ –í—Å–µ–≥–æ –≤ –ë–î Form4Data:", Form4Data.objects.count())
    # print(
    # "üëÄ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ Form4Data:",
    # Form4Data.objects.values_list("user__username", flat=True).distinct(),
    # )

    seen_codes = {}
    for item in queryset:  # ‚Üê item ‚Äî —ç—Ç–æ Form4Data
        if item.code not in seen_codes:
            seen_codes[item.code] = (
                item.article
            )  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—ã–π (—Å–∞–º—ã–π —Å–≤–µ–∂–∏–π) –∞—Ä—Ç–∏–∫—É–ª

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —à–∞–±–ª–æ–Ω–∞
    codes_with_articles = [
        {
            "code": code,
            "article": article or "‚Äî",  # –µ—Å–ª–∏ None ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "‚Äî"
        }
        for code, article in seen_codes.items()
    ]
    # print(
    #    "üìå codes_with_articles:", codes_with_articles
    # )  # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –ø–æ–ø–∞–ª–æ –≤ —à–∞–±–ª–æ–Ω

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–¥—É (–∫–∞–∫ —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ —á–∏—Å–ª–æ ‚Äî –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞)
    try:
        codes_with_articles.sort(key=lambda x: int(x["code"]))
    except ValueError:
        codes_with_articles.sort(key=lambda x: x["code"])  # –µ—Å–ª–∏ –∫–æ–¥ –Ω–µ —á–∏—Å–ª–æ–≤–æ–π

    return render(
        request,
        "forms_app/form4_list.html",
        {"codes_with_articles": codes_with_articles},
    )


# === –ü–†–û–°–ú–û–¢–† –î–ê–ù–ù–´–• –ü–û –ö–û–ù–ö–†–ï–¢–ù–û–ú–£ –ö–û–î–£ ===
@login_required
def form4_detail(request, code):
    records = (
        Form4Data.objects.filter(user=request.user, code=code)
        .select_related("user")
        .order_by("date")
    )

    if not records.exists():
        messages.warning(request, f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–¥–∞: {code}")
        return redirect("forms_app:form4_list")

    # –ë–µ—Ä—ë–º –∞—Ä—Ç–∏–∫—É–ª –∏–∑ —Å–∞–º–æ–π —Å–≤–µ–∂–µ–π –∑–∞–ø–∏—Å–∏
    latest_record = records.first()
    article = latest_record.article if latest_record and latest_record.article else "‚Äî"

    return render(
        request,
        "forms_app/form4_detail.html",
        {"records": records, "code": code, "article": article},
    )


# === –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–ü–ò–°–ò ===
@login_required
def form4_edit(request, pk):
    record = get_object_or_404(Form4Data, pk=pk, user=request.user)
    if request.method == "POST":
        form = Form4DataForm(request.POST, instance=record)
        if form.is_valid():
            form.save()
            messages.success(request, "–ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
            return redirect("forms_app:form4_detail", code=record.code)
    else:
        form = Form4DataForm(instance=record)
    return render(
        request, "forms_app/form4_edit.html", {"form": form, "record": record}
    )


@login_required
def export_form4_excel(request):
    data = Form4Data.objects.filter(user=request.user).order_by("code", "date")
    if not data.exists():
        messages.warning(request, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
        return redirect("forms_app:form4_list")

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–æ–¥—É
    df_dict = {}
    for item in data:
        code = item.code
        if code not in df_dict:
            df_dict[code] = []
        df_dict[code].append(
            {
                "–î–∞—Ç–∞": item.date.strftime("%d.%m.%Y"),
                "–ö–æ–¥ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã": item.code,
                "–ê—Ä—Ç–∏–∫—É–ª": item.article or "",
                "–ß–∏—Å—Ç—ã–µ –ø—Ä–æ–¥–∞–∂–∏ –ù–∞—à–∏": item.clear_sales_our,
                "–ß–∏—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –í–ë": item.clear_sales_vb,
                "–ß–∏—Å—Ç–æ–µ –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ": item.clear_transfer,
                "–ß–∏—Å—Ç–æ–µ –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ –±–µ–∑ –õ–æ–≥–∏—Å—Ç–∏–∫–∏": item.clear_transfer_without_log,
                "–ù–∞—à–∞ —Ü–µ–Ω–∞ –°—Ä–µ–¥–Ω—è—è": item.our_price_mid,
                "–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –í–ë –°—Ä–µ–¥–Ω—è—è": item.vb_selling_mid,
                "–ö –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—é –°—Ä–µ–¥–Ω–µ–µ": item.transfer_mid,
                "–ö –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—é –±–µ–∑ –õ–æ–≥–∏—Å—Ç–∏–∫–∏ –°—Ä–µ–¥–Ω—è—è": item.transfer_without_log_mid,
                "–ß–∏—Å—Ç—ã–µ –ø—Ä–æ–¥–∞–∂–∏, —à—Ç": item.qentity_sale,
                "–°–µ–±–µ—Å –ü—Ä–æ–¥–∞–∂ (600—Ä)": item.sebes_sale,
                "–ü—Ä–∏–±—ã–ª—å –Ω–∞ 1 –Æ–±–∫—É": item.profit_1,
                "%–í—ã–∫—É–ø–∞": item.percent_sell,
                "–ü—Ä–∏–±—ã–ª—å": item.profit,
                "–ó–∞–∫–∞–∑—ã": item.orders,
            }
        )

    # –°–æ–∑–¥–∞—ë–º Excel –≤ –ø–∞–º—è—Ç–∏
    buffer = BytesIO()
    with pd.ExcelWriter(buffer, engine="openpyxl") as writer:
        workbook = writer.book

        # === –°—Ç–∏–ª—å –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ ===
        if "header_style" not in workbook.named_styles:
            header_style = NamedStyle(
                name="header_style",
                font=Font(bold=True),
                alignment=Alignment(
                    wrap_text=True, horizontal="center", vertical="center"
                ),
            )
            workbook.add_named_style(header_style)

        for code, rows in df_dict.items():
            df = pd.DataFrame(rows)
            sheet_name = str(code)[:31]
            df.to_excel(writer, sheet_name=sheet_name, index=False)

            # –ü–æ–ª—É—á–∞–µ–º –ª–∏—Å—Ç
            worksheet = writer.sheets[sheet_name]

            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å –∫ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ (–∑–∞–≥–æ–ª–æ–≤–∫–∞–º)
            for cell in worksheet[1]:
                cell.style = "header_style"

            # –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
            for column in worksheet.columns:
                max_length = max(
                    (len(str(cell.value)) if cell.value else 0 for cell in column),
                    default=0,
                )
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É (–º–∞–∫—Å. 65 —Å–∏–º–≤–æ–ª–æ–≤)
                adjusted_width = min(max_length + 2, 65)
                worksheet.column_dimensions[
                    get_column_letter(column[0].column)
                ].width = adjusted_width

    buffer.seek(0)
    filename = f"form4_data_{request.user.username}_{datetime.now().strftime('%d%m%Y_%H%M')}.xlsx"

    response = HttpResponse(
        buffer.getvalue(),
        content_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
    )
    response["Content-Disposition"] = f'attachment; filename="{filename}"'
    return response


# === –ì–†–ê–§–ò–ö –ü–û –ü–†–ò–ë–´–õ–ò –° –§–ò–õ–¨–¢–†–û–ú –ü–û –î–ê–¢–ê–ú ===
@login_required
def form4_chart(request, code, chart_type=None):
    if chart_type is None:
        chart_type = "profit"

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏, —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–µ
    records = Form4Data.objects.filter(user=request.user, code=code).order_by("date")
    if not records.exists():
        messages.warning(request, f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ –∫–æ–¥—É: {code}")
        return redirect("forms_app:form4_list")

    # –ë–µ—Ä—ë–º –∞—Ä—Ç–∏–∫—É–ª –∏–∑ —Å–∞–º–æ–π —Å–≤–µ–∂–µ–π –∑–∞–ø–∏—Å–∏
    latest_record = records.first()
    article = latest_record.article if latest_record and latest_record.article else "‚Äî"

    # === –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–∞–º ===
    start_date = request.GET.get("start_date")
    end_date = request.GET.get("end_date")

    if start_date:
        try:
            start_date_parsed = datetime.strptime(start_date, "%Y-%m-%d").date()
            records = records.filter(date__gte=start_date_parsed)
        except ValueError:
            start_date = None  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ–≤–µ—Ä–Ω–∞

    if end_date:
        try:
            end_date_parsed = datetime.strptime(end_date, "%Y-%m-%d").date()
            records = records.filter(date__lte=end_date_parsed)
        except ValueError:
            end_date = None

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –∏ –¥–∞–Ω–Ω—ã–µ
    dates = [r.date.strftime("%d.%m.%Y") for r in records]
    if chart_type == "sales":
        data = [float(r.clear_sales_our or 0) for r in records]
        label = "–ß–∏—Å—Ç—ã–µ –ø—Ä–æ–¥–∞–∂–∏ –ù–∞—à–∏"
        color = "rgb(54, 162, 235)"
    elif chart_type == "orders":
        data = [r.orders or 0 for r in records]
        label = "–ó–∞–∫–∞–∑—ã"
        color = "rgb(153, 102, 255)"
    elif chart_type == "percent":
        data = [float(r.percent_sell or 0) for r in records]
        label = "% –í—ã–∫—É–ø–∞"
        color = "rgb(255, 159, 64)"
    else:  # profit
        data = [float(r.profit or 0) for r in records]
        label = "–ü—Ä–∏–±—ã–ª—å"
        color = "rgb(75, 192, 192)"

    return render(
        request,
        "forms_app/form4_chart.html",
        {
            "code": code,
            "article": article,
            "dates": dates,
            "data": data,
            "label": label,
            "color": color,
            "chart_type": chart_type,
            "start_date": start_date,
            "end_date": end_date,
        },
    )


# === –û–ë–ù–£–õ–ï–ù–ò–ï –í–°–ï–• –î–ê–ù–ù–´–• –§–û–†–ú–´ 4 ===
@login_required
def clear_form4_data(request):
    if request.method == "POST":
        deleted, _ = Form4Data.objects.filter(user=request.user).delete()
        messages.success(
            request, f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted} –∑–∞–ø–∏—Å–µ–π. –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã 4 –æ–±–Ω—É–ª–µ–Ω—ã."
        )
        return redirect("forms_app:form4_list")

    # –ï—Å–ª–∏ GET ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    return render(
        request,
        "forms_app/form4_confirm_clear.html",
        {"count": Form4Data.objects.filter(user=request.user).count()},
    )
